package com.founder.service;

import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import cfca.safeguard.Result;
import cfca.safeguard.api.bank.ClientEnvironment;
import cfca.safeguard.api.bank.Constants;
import cfca.safeguard.api.bank.SGBusiness;
import cfca.safeguard.api.bank.bean.tx.upstream.Tx100401;
import cfca.safeguard.api.bank.util.ResultUtil;
import cfca.safeguard.tx.business.bank.TxCaseReport_Transaction;

import com.founder.beans.Com;
import com.founder.database2.Tx100401Dao2;
import com.founder.tools.DateUtil;
import com.founder.tools.XMLUtil;

/**
 * 案件举报
 * @date 2016-07-22
 */
@Service("tx100401")
public class Tx100401Service {
	public final Logger log = Logger.getLogger(this.getClass());
	private SGBusiness sgBusiness;
	
	@Autowired
	private Tx100401Dao2 tx100401Dao;
	
    public Tx100401Service() throws Exception {
    	ClientEnvironment.initTxClientEnvironment(Com.CONFIG_PATH);
		sgBusiness = new SGBusiness();
	}

	public boolean execute(Tx100401 tx100401) throws Exception {
        String transSerialNumber = Com.BANK_CODE+Com.TRUST_CODE+Com.APP_ID+Com.getRandomNo(28-2);
        String fromTGOrganizationId="";

//        log.info("[可疑账户事件类型编号为："+featrue+"]");
        
        tx100401.setTransSerialNumber(transSerialNumber);
        tx100401.setApplicationID(Com.N0401+Com.getRandomNo(32));
        tx100401.setReportEndTime(DateUtil.getNow("yyyyMMddHHmmss"));
        
//		List<Attachment> attachmentList = new ArrayList<Attachment>();
//        Attachment attachment = new Attachment();
//        attachment
//                .setContent("");
//        attachment.setFilename(Com.FT_03+Com.FP_PDF+"_"+transSerialNumber+"_"+tx100401.getVictimIDNumber());
//        attachmentList.add(attachment);
//        tx100401.setAttachmentList(attachmentList);
        
        String requestXML = sgBusiness.tx100401(tx100401, fromTGOrganizationId, "01", "100000000005");
        log.info("发送报文：\n"+XMLUtil.formatXml(requestXML));
        String responseXML = sgBusiness.sendPackagedRequestXML(requestXML);
        log.info("返回报文：\n"+XMLUtil.formatXml(responseXML));
//        Tx100402 result = ResultUtil.convertToTx100402(responseXML);

        Result result = ResultUtil.chageXMLToResult(responseXML);

        return Constants.SUCCESS_CODE_VALUE.equals(result.getCode());
	}
	
	/**
	 * 根据受害人提供的条件，查询交易流水信息，
	 */
	public List<TxCaseReport_Transaction> listgrTransactions(Map<String,?> param){
		return tx100401Dao.listgrTransactions(param);
	}
	
	public Integer getgrTransactionsCount(Map<String,?> param){
		return tx100401Dao.getgrTransactionsCount(param);
	}
	
	/**
	 * 根据多个交易流水号，查询多个交易信息
	 */
	public List<TxCaseReport_Transaction> getgrTransactionsByFlows(List<String> param){
		return tx100401Dao.getgrTransactionsByFlows(param);
	}
	
	/**
	 * 根据条件查询客户信息
	 */
	public Tx100401 getgrCust(Map<String,?> param){
		return tx100401Dao.getFgrCust(param);
	}

}
